class UsuarioDAO {
    constructor(bd) {
        this.bd = bd
    }
 
    async pegaTodosUsuarios() {
        try {
            return new Promise((resolve, reject) => {             
    
                this.bd.all('SELECT * FROM usuarios', (error, rows) => {
                    if(error) {
                        reject({
                            "mensagem" : error.message,
                            "erro" : true
                        })
                    } else {
                        resolve({
                            "usuarios" : rows,
                            "erro" : false
                        })
                    }
                })
    
            })
        } catch(error){
            throw new Error(error.message)
        }
        
    }

    async pegaUsuarioEmail(email) {
       try{
        return new Promise((resolve, reject) => {
            this.bd.all(`SELECT * FROM USUARIOS WHERE EMAIL = ?`, email, (error, rows) => {
                if(error) {
                    reject({
                        "mensagem" : error.message,
                        "erro" : true
                        })
                } else {
                    resolve({
                        "requisicao" : rows,
                        "erro" : false
                    })
                }
            })
        })
       } catch(error){
            throw new Error(error.message)
       }
       
    }

    async pegaIdUsuario(id) {
        try{
           return new Promise((resolve, reject) => {
                this.bd.all(`SELECT * FROM USUARIOS WHERE ID = ?`, id, (error, rows) => {
                    if(error) {
                        reject({
                            "mensagem" : error.message,
                            "erro" : true
                        })
                    } else {
                        resolve({
                            "requisicao" : rows,
                            "erro" : false
                        })
                    }
                })
            })
        } catch(error) {
            throw new Error(error.message)
        }
        
    }

    async registraUsuario(novoUsuario) {
        try {                           
            return new Promise((resolve, reject) => {
                this.bd.run('INSERT INTO USUARIOS (nome, email, tel, senha) VALUES (?,?,?,?)', [novoUsuario.nome, novoUsuario.email, novoUsuario.tel, novoUsuario.senha], 
                    (error) => {
                        if(error) {
                            reject({
                                "mensagem" : error.message,
                                "erro" : true
                            })
                        } else {
                            resolve({
                                "requisicao" : novoUsuario,
                                "erro" : false
                            })
                        }
                    })
            })
        } catch(error) {
            throw new Error(error.message)
        }
 
    }


    async apagaUsuario(id) {
        try {
            const user = await this.pegaIdUsuario(id)
            if(user.requisicao.length) {
                return new Promise((resolve, reject) => {
                    this.bd.run(`DELETE FROM USUARIOS WHERE ID = ?`, id, (error) => {
                        if(error){
                            reject({
                                "mensagem" : error.message,
                                "erro" : true
                            })
                        } else {
                            resolve({
                                "mensagem" : `Usuário foi deletado`,
                                "erro" : false
                            })
                        }
                    })
                })
            } else {
                throw new Error(`Usuário não foi encontrado`)
            }
        } catch(error) {
            throw new Error(error.message)
        }
    }
    

    async atualizaUsuario(id, usuarioNovo){
        try {
            return new Promise((resolve, reject) => {
                this.bd.run(`UPDATE USUARIOS SET NOME = ?, EMAIL = ?, TEL = ?, SENHA = ? WHERE ID = ?` , [usuarioNovo.nome, usuarioNovo.email, usuarioNovo.tel, usuarioNovo.Senha, id], (error) => {
                    if(error) {
                        reject({
                            "mensagem" : error.message,
                            "erro" : true
                        })
                    } else {
                        resolve({
                            "mensagem" : `Usuário atualizado!`,
                            "usuario" : usuarioNovo,
                            "erro" : false
                        })
                    }
                })
            })
        } catch(error) {
            throw new Error(error.message)
        }
    }

    
}

module.exports = UsuarioDAO